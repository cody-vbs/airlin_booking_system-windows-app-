
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author syd
 */
public class FlightResult extends javax.swing.JFrame {

    /**
     * Creates new form FlightResult
     */
    SearchFlightJava sj = new SearchFlightJava();
    FlightDBQuery fq= new FlightDBQuery();
    public FlightResult() throws SQLException {
        initComponents();
        this.flightTblResult();
        this.setJframeIcon();
       
 
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        flightTbl = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        fromNameLabel = new javax.swing.JLabel();
        toNameLabel = new javax.swing.JLabel();
        connectFromLabel = new javax.swing.JLabel();
        connectFromNameLabel = new javax.swing.JLabel();
        connectToLabel = new javax.swing.JLabel();
        connectToNameLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        flightTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(flightTbl);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Booking Summary");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        bookArea.setEditable(false);
        bookArea.setColumns(20);
        bookArea.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        bookArea.setRows(5);
        bookArea.setBorder(null);
        jScrollPane2.setViewportView(bookArea);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 204));
        jLabel2.setText("Departure");

        fromLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        fromLabel.setText("jLabel3");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/airplane.png"))); // NOI18N

        toLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        toLabel.setText("jLabel3");

        fromNameLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        fromNameLabel.setText("jLabel4");

        toNameLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        toNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        toNameLabel.setText("jLabel4");

        connectFromLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        connectFromLabel.setText("jLabel3");

        connectFromNameLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        connectFromNameLabel.setText("jLabel4");

        connectToLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        connectToLabel.setText("jLabel3");

        connectToNameLabel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        connectToNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectToNameLabel.setText("jLabel4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(fromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectFromNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectToLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectToNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(toLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(connectFromNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(connectToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(connectToNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton1.setText("Proceed");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.getValue();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    private void flightTblResult() throws SQLException{
        if(sj.getFromFlight().getSelectedItem() == "Bacolod" && sj.toFlight.getSelectedItem() == "Cebu"){
            System.out.println(true);
            fq.loadTbl("bacolod_cebu", flightTbl);
        }else if(sj.getFromFlight().getSelectedItem()=="Bacolod" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("bacolod_manila", flightTbl);
        }else if(sj.getFromFlight().getSelectedItem()=="Bohol" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("bohol_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Boracay" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("boracay_manila", flightTbl);
        }else if (sj.fromFlight.getSelectedItem()=="Cagayan de Oro" && sj.toFlight.getSelectedItem()=="Cebu"){
            fq.loadTbl("cagayan_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Cagayan de Oro" && sj.toFlight.getSelectedItem() == "Manila"){
            fq.loadTbl("cagayan_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Cebu" && sj.toFlight.getSelectedItem()=="Bacolod"){
            fq.loadTbl("cebu_bacolod", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Cebu" && sj.toFlight.getSelectedItem()=="Cagayan de Oro"){
            fq.loadTbl("cebu_cagayan", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Cebu" && sj.toFlight.getSelectedItem()=="Davao"){
            fq.loadTbl("cebu_davao", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Cebu" && sj.toFlight.getSelectedItem()=="Gensan"){
            fq.loadTbl("cebu_gensan", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Cebu" && sj.toFlight.getSelectedItem()=="Iloilo"){
            fq.loadTbl("cebu_iloilo", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Cebu" && sj.toFlight.getSelectedItem() == "Korea"){
            fq.loadTbl("cebu_korea", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Cebu" && sj.toFlight.getSelectedItem() == "Manila"){
            fq.loadTbl("cebu_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Cebu" && sj.toFlight.getSelectedItem() == "Singapore"){
            fq.loadTbl("cebu_singapore", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Cebu" && sj.toFlight.getSelectedItem() == "Tokyo Japan"){
            fq.loadTbl("cebu_tokyo", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Clark" && sj.toFlight.getSelectedItem()=="Bohol"){
            fq.loadTbl("clark_bohol", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Clark" && sj.toFlight.getSelectedItem()=="Boracay"){
            fq.loadTbl("clark_boracay", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() =="Clark" && sj.toFlight.getSelectedItem() == "Cebu"){
            fq.loadTbl("clark_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Clark" && sj.toFlight.getSelectedItem() == "Davao"){
            fq.loadTbl("clark_davao", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Clark" && sj.toFlight.getSelectedItem()=="Singapore"){
            fq.loadTbl("clark_singapore", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Coron" && sj.toFlight.getSelectedItem() == "Cebu"){
            fq.loadTbl("coron_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Coron" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("coron_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Davao" && sj.toFlight.getSelectedItem() == "Bacolod"){
            fq.loadTbl("davao_bacolod", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Davao" && sj.toFlight.getSelectedItem() == "Cebu"){
            fq.loadTbl("davao_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Davao" && sj.toFlight.getSelectedItem() =="Iloilo"){
            fq.loadTbl("davao_iloilo", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Davao" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("davao_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Davao"&& sj.toFlight.getSelectedItem()=="Zamboanga"){
            fq.loadTbl("davao_zamboanga", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Dumaguete" && sj.toFlight.getSelectedItem() =="Manila"){
            fq.loadTbl("dumaguete_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Gensan" && sj.toFlight.getSelectedItem()=="Cebu"){
            fq.loadTbl("gensan_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Gensan" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("gensan_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Iloilo" && sj.toFlight.getSelectedItem()=="Cagayan de Oro"){
            fq.loadTbl("iloilo_cagayan", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Iloilo" && sj.toFlight.getSelectedItem()=="Cebu"){
            fq.loadTbl("iloilo_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Iloilo" && sj.toFlight.getSelectedItem()=="Clark"){
            fq.loadTbl("iloilo_clark", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Iloilo" && sj.toFlight.getSelectedItem()=="Davao"){
            fq.loadTbl("iloilo_davao", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Iloilo" && sj.toFlight.getSelectedItem()=="Gensan"){
            fq.loadTbl("iloilo_gensan", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Iloilo" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("iloilo_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Iloilo" && sj.toFlight.getSelectedItem() == "Puerto Princesa"){
            fq.loadTbl("iloilo_princesa", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Kalibo" && sj.toFlight.getSelectedItem()=="Cebu"){
            fq.loadTbl("kalibo_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Kalibo" && sj.toFlight.getSelectedItem() == "Manila"){
            fq.loadTbl("kalibo_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Bacolod"){
            fq.loadTbl("manila_bacolod", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Bangkok Thailand"){
            fq.loadTbl("manila_bangkok", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Bohol"){
            fq.loadTbl("manila_bohol", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Brunei"){
           fq.loadTbl("manila_brunei", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem() == "Cambodia"){
            fq.loadTbl("manila_cambodia", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Cebu"){
            fq.loadTbl("manila_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Bejing China"){
            fq.loadTbl("manila_china", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Davao"){
            fq.loadTbl("manila_davao", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Dubai"){
            fq.loadTbl("manila_dubai", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Hanoi Vietnam"){
            fq.loadTbl("manila_hanoi", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Hongkong"){
            fq.loadTbl("manila_hongkong", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Kuwait"){
            fq.loadTbl("manila_kuwait", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Malaysia"){
            fq.loadTbl("manila_malaysia", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Puerto Princesa"){
            fq.loadTbl("manila_princesa", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Qatar"){
            fq.loadTbl("manila_qatar", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Singapore"){
            fq.loadTbl("manila_singapore", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()== "Sydney Australia"){
            fq.loadTbl("manila_sydney", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Taipei"){
            fq.loadTbl("manila_taipei", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Manila" && sj.toFlight.getSelectedItem()=="Tokyo Japan"){
            fq.loadTbl("manila_tokyo", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Puerto Princesa" && sj.toFlight.getSelectedItem()=="Cebu"){
            fq.loadTbl("princesa_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Puerto Princesa" && sj.toFlight.getSelectedItem()=="Clark"){
            fq.loadTbl("princesa_clark", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Puerto Princesa" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("princessa_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Siargao" && sj.toFlight.getSelectedItem() == "Cebu"){
            fq.loadTbl("siargao_cebu", flightTbl);
        }else if(sj.fromFlight.getSelectedItem() == "Siargao" && sj.toFlight.getSelectedItem()=="Clark"){
            fq.loadTbl("siargao_clark", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Siargao" && sj.toFlight.getSelectedItem()=="Davao"){
            fq.loadTbl("siargao_davao", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Siargao" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("siargao_manila", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Zamboanga" && sj.toFlight.getSelectedItem()=="Davao"){
            fq.loadTbl("zamboanga_davao", flightTbl);
        }else if(sj.fromFlight.getSelectedItem()=="Zamboanga" && sj.toFlight.getSelectedItem()=="Manila"){
            fq.loadTbl("zamboanga_manila", flightTbl);
        }else{
            fq.noFlightsAvailable();
        }
    }
    
      public void setJframeIcon(){
        String iconDir = "src\\Icons\\logo.png";
        Image icon = Toolkit.getDefaultToolkit().getImage(iconDir);
        this.setIconImage(icon);
        this.setTitle("Airline Booking System");
        this.setLocationRelativeTo(null);
        this.setResizable(false);
       
        
        //resize table cells
        this.resizeColumnWidth(flightTbl);
        
    }
      
    private  void getValue(){
        int row = flightTbl.getSelectedRow();
        int column = flightTbl.getColumnCount();
        String [] data = new String[6];
        for(int i = 0; i < column; i++) {
//            System.out.println(flightTbl.getValueAt(row, i));
            data [i] = flightTbl.getValueAt(row, i).toString();
             
            
        }
        String text ="FLIGHT NUMBER.: " +  data[0] +"\n" + "Departure" + "\n" +
                new GetDate().getFromDate() + " • "  + data[1]+"\n" + "Arrival" + "\n" + new GetDate().getFromDate()
                + " • " + data[2];
        
        //CEBBCD
        String str1 = data[3].substring(0,3);
        String str2 = data[3].substring(3,6);
        
        
//        if((!str1.equals("CEB") && str2.equals("ICN")) && (!str1.equals("CEB") && str2.equals("SIN"))
//                 && (!str1.equals("CEB") && str2.equals("HND"))){
        fromLabel.setText(str1);
        toLabel.setText(str2);
//        }
        System.out.println(new GetDate().getFromDate());
        System.out.println(new GetDate().getToDate());
        
        if(str1.equals("BCD") && str2.equals("CEB")){
            bookArea.setText("BACOLOD TO CEBU "+"\n"+text);
            fromNameLabel.setText("Bacolod");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("BCD") &&  str2.equals("MNL")){
            bookArea.setText("BACOLOD TO MANILA" + "\n" + text);
            fromNameLabel.setText("Bacolod");
            toNameLabel.setText("Manila");
        }else if(str1.equals("TAG") && str2.equals("MNL")){
            bookArea.setText("BOHOL TO MANILA" + "\n" + text);
            fromNameLabel.setText("Bohol");
            toNameLabel.setText("Manila");
        }else if(str1.equals("MPH") && str2.equals("MNL")){
            bookArea.setText("BORACAY-CATICLAN TO MANILA" +"\n" + text);
            fromNameLabel.setText("Boracay-Caticlan");
            toNameLabel.setText("Manila");
        }else if(str1.equals("CGY") && str2.equals("CEB")){
            bookArea.setText("CAGAYAN DE ORO TO CEBU" + "\n" + text);
            fromNameLabel.setText("Cagayan de Oro");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("CGY") && str2.equals("MNL")){
            bookArea.setText("CAGAYAN DE ORO TO MANILA"+"\n" +text);
            fromNameLabel.setText("Cagayan de Oro");
            toNameLabel.setText("Manila");
        }else if(str1.equals("CEB") && str2.equals("BCD")){
            bookArea.setText("CEBU TO BACOLOD "+"\n"+text);
            fromNameLabel.setText("Cebu");
            toNameLabel.setText("Bacolod");
        }else if(str1.equals("CEB") && str2.equals("CGY")){
            bookArea.setText("CEBU TO CAGAYAN DE ORO "+"\n"+text);
            fromNameLabel.setText("Cebu");
            toNameLabel.setText("Cagayan de Oro");
        }else if(str1.equals("CEB") && str2.equals("DVO")){
            bookArea.setText("CEBU TO DAVAO"+"\n"+text);
            fromNameLabel.setText("Cebu");
            toNameLabel.setText("Davao");
        }else if(str1.equals("CEB") && str2.equals("GES")){
            bookArea.setText("CEBU TO GENERAL SANTOS "+"\n"+text);
            fromNameLabel.setText("Cebu");
            toNameLabel.setText("General Santos");
        }else if(str1.equals("CEB") && str2.equals("ILO")){
            bookArea.setText("CEBU TO ILOILO "+"\n"+text);
            fromNameLabel.setText("Cebu");
            toNameLabel.setText("Iloilo");
        }else if(str1.equals("CEB") && str2.equals("ICN")){
            bookArea.setText("CEBU TO SEOUL-INCHEON "+"\n"+text);
            //cebu - korea
            fromLabel.setText("CEB");
            fromNameLabel.setText("Cebu");
            toLabel.setText("MNL");
            toNameLabel.setText("Manila");
            connectFromLabel.setText("MNL");
            connectFromNameLabel.setText("Manila");
            connectToLabel.setText("ICN");
            connectToNameLabel.setText("Seoul- Incheon");
        }else if(str1.equals("CEB") && str2.equals("MNL")){
            bookArea.setText("CEBU TO MANILA "+"\n"+text);
            fromNameLabel.setText("Cebu");
            toNameLabel.setText("Manila");
        }else if(str1.equals("CEB") && str2.equals("SIN")){
            bookArea.setText("CEBU TO SINGAPORE "+"\n"+text);
            //cebu - singapore
            fromLabel.setText("CEB");
            fromNameLabel.setText("Cebu");
            toLabel.setText("MNL");
            toNameLabel.setText("Manila");
            connectFromLabel.setText("MNL");
            connectFromNameLabel.setText("Manila");
            connectToLabel.setText("SIN");
            connectToNameLabel.setText("Singapore");
        }else if(str1.equals("HND") && str2.equals("CEB")){
            //cebu - tokyo
            bookArea.setText("CEBU TO JAPAN TOKYO-HANEDA "+"\n"+text);
            System.out.println("Tokyo");
            fromLabel.setText("CEB");
            fromNameLabel.setText("Cebu");
            toLabel.setText("MNL");
            toNameLabel.setText("Manila");
            connectFromLabel.setText("MNL");
            connectFromNameLabel.setText("Manila");
            connectToLabel.setText("HND");
            connectToNameLabel.setText("Japan Tokyo-Haneda");
        }else if(str1.equals("CRK") && str2.equals("TAG")){
            bookArea.setText("CLARK TO BOHOL "+"\n"+text);
            fromNameLabel.setText("Clark");
            toNameLabel.setText("Bohol");
        }else if(str1.equals("CRK") && str2.equals("MPH")){
            bookArea.setText("CLARK TO BORACAY-CATICLAN "+"\n"+text);
            fromNameLabel.setText("Clark");
            toNameLabel.setText("Boracay-Caticlan");
        }else if(str1.equals("CRK")&& str2.equals("CEB")){
            bookArea.setText("CLARK TO CEBU "+"\n"+text);
            fromNameLabel.setText("Clark");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("CRK") && str2.equals("DVO")){
            bookArea.setText("CLARK TO DAVAO "+"\n"+text);
            fromNameLabel.setText("Clark");
            toNameLabel.setText("Davao");
        }else if(str1.equals("CRK") && str2.equals("SIN")){
            bookArea.setText("CLARK TO SINGAPORE "+"\n"+text);
            fromNameLabel.setText("Clark");
            toNameLabel.setText("Singapore");
        }else if(str1.equals("USU") && str2.equals("CEB")){
            bookArea.setText("CORON-BUSUANGA TO CEBU "+"\n"+text);
            fromNameLabel.setText("Coron-Busuanga");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("USU") && str2.equals("MNL")){
            bookArea.setText("CORON-BUSUANGA TO MANILA "+"\n"+text);
            fromNameLabel.setText("Coron-Busuanga");
            toNameLabel.setText("Manila");
        }else if(str1.equals("DVO") && str2.equals("BCD")){
            bookArea.setText("DAVAO TO BACOLOD "+"\n"+text);
            fromNameLabel.setText("Davao");
            toNameLabel.setText("Bacolod");
        }else if(str1.equals("DVO") && str2.equals("CEB")){
            bookArea.setText("DAVAO TO CEBU "+"\n"+text);
            fromNameLabel.setText("Davao");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("DVO") && str2.equals("ILO")){
            bookArea.setText("DAVAO TO ILOILO "+"\n"+text);
            fromNameLabel.setText("Davao");
            toNameLabel.setText("Iloilo");
        }else if(str1.equals("DVO") && str2.equals("MNL")){
            bookArea.setText("DAVAO TO MANILA"+"\n"+text);
            fromNameLabel.setText("Davao");
            toNameLabel.setText("Manila");
        }else if(str1.equals("DVO") && str2.equals("ZAM")){
            bookArea.setText("DAVAO TO ZAMBOANGA "+"\n"+text);
            fromNameLabel.setText("Davao");
            toNameLabel.setText("Zamboanga");
        }else if(str1.equals("DGT") && str2.equals("MNL")){
            bookArea.setText("DUMAGUETE TO MANILA "+"\n"+text);
            fromNameLabel.setText("Dumaguete");
            toNameLabel.setText("Manila");
        }else if(str1.equals("GES") && str2.equals("CEB")){
            bookArea.setText("GENERAL SANTOS TO CEBU "+"\n"+text);
            fromNameLabel.setText("General Santos");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("GES") && str2.equals("MNL")){
            bookArea.setText("GENERAL SANTOS TO MANILA "+"\n"+text);
            fromNameLabel.setText("General Santos");
            toNameLabel.setText("Manila");
        }else if(str1.equals("ILO") && str2.equals("CGY")){
            bookArea.setText("ILOILO TO CAGYAN DE ORO "+"\n"+text);
            fromNameLabel.setText("Iloilo");
            toNameLabel.setText("Cagayan de Oro");
        }else if(str1.equals("ILO") && str2.equals("CEB")){
            bookArea.setText("ILOILO TO CEBU "+"\n"+text);
            fromNameLabel.setText("Iloilo");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("ILO") && str2.equals("CRK")){
            bookArea.setText("ILOILO TO CLARK "+"\n"+text);
            fromNameLabel.setText("Iloilo");
            toNameLabel.setText("Clark");
        }else if(str1.equals("ILO") && str2.equals("DVO")){
            bookArea.setText("ILOILO TO DAVAO "+"\n"+text);
            fromNameLabel.setText("Iloilo");
            toNameLabel.setText("Davao");
        }else if(str1.equals("ILO") && str2.equals("GES")){
            bookArea.setText("ILOILO TO GENERAL SANTOS "+"\n"+text);
            fromNameLabel.setText("Iloilo");
            toNameLabel.setText("General Santos");
        }else if(str1.equals("ILO") && str2.equals("MNL")){
            bookArea.setText("ILOILO TO MANILA "+"\n"+text);
            fromNameLabel.setText("Iloilo");
            toNameLabel.setText("Manila");
        }else if(str1.equals("ILO") && str2.equals("PPS")){
            bookArea.setText("ILOILO TO PUERTO PRINCESA "+"\n"+text);
            fromNameLabel.setText("Iloilo");
            toNameLabel.setText("Puerto Princesa");
        }else if(str1.equals("KLO") && str2.equals("CEB")){
            bookArea.setText("KALIBO TO CEBU "+"\n"+text);
            fromNameLabel.setText("Kalibo");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("KLO") && str2.equals("MNL")){
            bookArea.setText("KALIBO TO MANILA "+"\n"+text);
            fromNameLabel.setText("Kalibo");
            toNameLabel.setText("Manila");
        }else if(str1.equals("MNL") && str2.equals("BCD")){
            bookArea.setText("MANILA TO BACOLOD "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Bacolod");
        }else if(str1.equals("MNL") && str2.equals("BKK")){
            bookArea.setText("MANILA TO BANGKOK "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Bangkok");
        }else if(str1.equals("MNL") && str2.equals("TAG")){
            bookArea.setText("MNAILA TO BOHOL"+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Bohol");
        }else if(str1.equals("MNL") && str2.equals("BWN")){
            bookArea.setText("MANILA TO BRUNEI BANDAR SERI BEGAWAN "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Brunei Bandar Seri Begawan");
        }else if(str1.equals("MNL") && str2.equals("REP")){
            bookArea.setText("MANILA TO CAMBODIA SIEM REAP "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Cambodia Siem Reap");
        }else if(str1.equals("MNL") && str2.equals("CEB")){
            bookArea.setText("MANILA TO CEBU"+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("MNL") && str2.equals("PEK")){
            bookArea.setText("MANILA TO CHINA BEJING"+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("China Bejing");
        }else if(str1.equals("MNL") && str2.equals("DVO")){
            bookArea.setText("MANILA TO DAVAO "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Davao");
        }else if(str1.equals("MNL") && str2.equals("DXB")){
            bookArea.setText("MANILA TO DUBAI "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Dubai");
        }else if(str1.equals("MNL") && str2.equals("HAN")){
            bookArea.setText("MANILA TO VIETNAM-HANOI "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Vietnam-Hanoi");
        }else if(str1.equals("MNL") && str2.equals("HKG")){
            bookArea.setText("MANILA TO HONGKONG "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Hongkong");
        }else if(str1.equals("MNL") && str2.equals("KWI")){
            bookArea.setText("MANILA TO KUWAIT "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Kuwait");
        }else if(str1.equals("MNL") && str2.equals("KUL")){
            bookArea.setText("MANILA TO MALAYSIA KUALA LUMPUR "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Malaysia Kuala Lumpur");
        }else if(str1.equals("MNL") && str2.equals("PPS")){
            bookArea.setText("MANILA TO PUERTO PRINCESA "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Puerto Princesa");
        }else if(str1.equals("MNL") && str2.equals("DOH")){
            bookArea.setText("MANILA TO QATAR DOHA-HAMAD"+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Qatar Doha-Hamad");
        }else if(str1.equals("MNL") && str2.equals("SIN")){
            bookArea.setText("MANILA TO SINGAPORE "+"\n"+text);
            fromNameLabel.setText("Mania");
            toNameLabel.setText("Singapore");
        }else if(str1.equals("MNL") && str2.equals("SYD")){
            bookArea.setText("MANILA TO AUSTRALIA SYDNEY "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Australia Sydney");
        }else if(str1.equals("MNL") && str2.equals("TPE")){
            bookArea.setText("MANILA TO TAIPEI "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Taipei");
        }else if(str1.equals("MNL") && str2.equals("HND")){
            bookArea.setText("MANILA TO JAPAN TOKYO-HANEDA "+"\n"+text);
            fromNameLabel.setText("Manila");
            toNameLabel.setText("Japan Tokyo-Haneda");
        }else if(str1.equals("PPS") && str2.equals("CEB")){
            bookArea.setText("PUERTO PRINCESA TO CEBU "+"\n"+text);
            fromNameLabel.setText("Puerto Princesa");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("PPS") && str2.equals("CRK")){
            bookArea.setText("PUERTO PRINCESA TO CLARK "+"\n"+text);
            fromNameLabel.setText("Puerto Princesa");
            toNameLabel.setText("Clark");
        }else if(str1.equals("PPS") && str2.equals("Manila")){
            bookArea.setText("PUERTO PRINCESA TO MANILA "+"\n"+text);
            fromNameLabel.setText("Puerto Princesa");
            toNameLabel.setText("Manila");
        }else if(str1.equals("IAO") && str2.equals("CEB")){
            bookArea.setText("SIARGAO TO CEBU "+"\n"+text);
            fromNameLabel.setText("Siargao");
            toNameLabel.setText("Cebu");
        }else if(str1.equals("IAO") && str2.equals("CRK")){
            bookArea.setText("SIARGAO TO CLARK "+"\n"+text);
            fromNameLabel.setText("Siargao");
            toNameLabel.setText("Clark");
        }else if(str1.equals("IAO") && str2.equals("DVO")){
            bookArea.setText("SIARGAO TO DAVAO "+"\n"+text);
            fromNameLabel.setText("Siargao");
            toNameLabel.setText("Davao");
        }else if(str1.equals("IAO") && str2.equals("MNL")){
            bookArea.setText("SIARGAO TO MANILA "+"\n"+text);
            fromNameLabel.setText("Siargao");
            toNameLabel.setText("Manila");
        }else if(str1.equals("ZAM") && str2.equals("DVO")){
            bookArea.setText("ZAMBOANGA TO DAVAO "+"\n"+text);
            fromNameLabel.setText("Zamboanga");
            toNameLabel.setText("Davao");
        }else if(str1.equals("ZAM") && str2.equals("MNL")){
            bookArea.setText("ZAMBOANGA TO MANILA "+"\n"+text);
            fromNameLabel.setText("Zamboanga");
            toNameLabel.setText("Manila");
        }
            
        
        System.out.println(str1);
        System.out.println(str2);
        
        //debugging
        
//        String data2= data[5].replace("PHP","");
//        
//        Double num = Double.parseDouble(data2);
//        
//        Double change = 30000 -num;
//   
//        System.out.println(data2);
//        System.out.println(change);
        
       
        
    }
    
    
    
     public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width +1 , width);
            }
            if(width > 300)
                width=300;
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlightResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlightResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlightResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlightResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FlightResult().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FlightResult.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bookArea;
    private javax.swing.JLabel connectFromLabel;
    private javax.swing.JLabel connectFromNameLabel;
    private javax.swing.JLabel connectToLabel;
    private javax.swing.JLabel connectToNameLabel;
    private javax.swing.JTable flightTbl;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel fromNameLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel toNameLabel;
    // End of variables declaration//GEN-END:variables
}
